import type { Account } from "viem/accounts"

import type { Chain, Hex } from "viem"
import type { Client, Transport } from "viem"
import type { AnyData } from "../../../modules/utils/Types"
import type { BicoRpcSchema } from "./index"

export type BicoUserOperationStatus = {
  state: string // for now // could be an enum
  transactionHash: string
  userOperationReceipt: {
    /* The request hash of the UserOperation. */
    userOpHash: string
    /* The entry point address used for the UserOperation. */
    entryPoint: string
    /* The paymaster used for this UserOperation (or empty). */
    paymaster: string
    /* The actual amount paid (by account or paymaster) for this UserOperation. */
    actualGasCost: Hex
    /* The total gas used by this UserOperation (including preVerification, creation, validation, and execution). */
    actualGasUsed: Hex
    /* Indicates whether the execution completed without reverting. */
    success: "true" | "false"
    /* In case of revert, this is the revert reason. */
    reason: string
    /* The logs generated by this UserOperation (not including logs of other UserOperations in the same bundle). */
    logs: Array<AnyData> // The logs generated by this UserOperation (not including logs of other UserOperations in the same bundle)
    /* The TransactionReceipt object for the entire bundle, not only for this UserOperation. */
    receipt: AnyData
  }
}

export const getUserOperationStatus = async (
  client: Client<
    Transport,
    Chain | undefined,
    Account | undefined,
    BicoRpcSchema
  >,
  userOpHash: Hex
) => {
  return client.request({
    method: "biconomy_getUserOperationStatus",
    params: [userOpHash]
  })
}
