import type { ENTRYPOINT_ADDRESS_V06_TYPE } from "permissionless/types/entrypoint"
import type { Address, Hash, Hex } from "viem"
import type { PartialBy } from "viem/chains"
import type { UserOperationStruct } from "../../accounts"

export type BundlerRpcSchema = [
  {
    Method: "eth_sendUserOperation"
    Parameters: [
      userOperation: UserOperationStruct,
      entryPointAddress: ENTRYPOINT_ADDRESS_V06_TYPE
    ]
    ReturnType: Hash
  },
  {
    Method: "eth_estimateUserOperationGas"
    Parameters: [
      userOperation: PartialBy<
        UserOperationStruct,
        "callGasLimit" | "preVerificationGas" | "verificationGasLimit"
      >,
      entryPointAddress: ENTRYPOINT_ADDRESS_V06_TYPE,
      stateOverrides?: StateOverrides
    ]
    ReturnType: {
      preVerificationGas: string
      verificationGasLimit: string
      callGasLimit?: string
      maxPriorityFeePerGas: string
      maxFeePerGas: string
    }
  },
  {
    Method: "eth_supportedEntryPoints"
    Parameters: []
    ReturnType: Address[]
  },
  {
    Method: "eth_chainId"
    Parameters: []
    ReturnType: Hex
  },
  {
    Method: "eth_getUserOperationByHash"
    Parameters: [hash: Hash]
    ReturnType: {
      userOperation: UserOperationStruct
      entryPoint: ENTRYPOINT_ADDRESS_V06_TYPE
      transactionHash: Hash
      blockHash: Hash
      blockNumber: Hex
    }
  },
  {
    Method: "eth_getUserOperationReceipt"
    Parameters: [hash: Hash]
    ReturnType: UserOpReceipt
  },
  {
    Method: "biconomy_getGasFeeValues"
    Parameters: []
    ReturnType: GasFeeValues
  }
]

export type StateOverrides = {
  [x: string]: {
    balance?: bigint | undefined
    nonce?: bigint | number | undefined
    code?: Hex | undefined
    state?: {
      [x: Hex]: Hex
    }
    stateDiff?: {
      [x: Hex]: Hex
    }
  }
}

export type EstimateUserOperationGasParameters = {
  userOperation: UserOperationStruct
}

export type WaitForUserOperationReceiptParameters = {
  /** The hash of the transaction. */
  hash: Hash
  /**
   * Polling frequency (in ms). Defaults to the client's pollingInterval config.
   * @default client.pollingInterval
   */
  pollingInterval?: number
  /** Optional timeout (in milliseconds) to wait before stopping polling. */
  timeout?: number
}

export type TStatus = "success" | "reverted"

export type UserOpReceipt = {
  /* The request hash of the UserOperation. */
  userOpHash: string
  /* The entry point address used for the UserOperation. */
  entryPoint: string
  /* The paymaster used for this UserOperation (or empty). */
  paymaster: string
  /* The actual amount paid (by account or paymaster) for this UserOperation. */
  actualGasCost: Hex
  /* The total gas used by this UserOperation (including preVerification, creation, validation, and execution). */
  actualGasUsed: Hex
  /* Indicates whether the execution completed without reverting. */
  success: "true" | "false"
  /* In case of revert, this is the revert reason. */
  reason: string
  /* The logs generated by this UserOperation (not including logs of other UserOperations in the same bundle). */
  logs: Array<any> // The logs generated by this UserOperation (not including logs of other UserOperations in the same bundle)
  /* The TransactionReceipt object for the entire bundle, not only for this UserOperation. */
  receipt: any
}

export type GetUserOperationByHashParameters = {
  hash: Hash
}

export type GetGasFeeValuesReturnType = GasFeeValues

export type GasFeeValues = {
  maxPriorityFeePerGas: string
  maxFeePerGas: string
}
